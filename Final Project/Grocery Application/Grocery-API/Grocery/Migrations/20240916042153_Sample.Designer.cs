// <auto-generated />
using System;
using Grocery.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Grocery.Migrations
{
    [DbContext(typeof(GroceryDbContext))]
    [Migration("20240916042153_Sample")]
    partial class Sample
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Grocery.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "123 Main St, Cityville",
                            PhoneNumber = "123-456-7890",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Grocery.Model.DeliveryStaff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryStaffs");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            PhoneNumber = "555-9876",
                            UserId = 2,
                            VehicleNumber = "AB1234"
                        });
                });

            modelBuilder.Entity("Grocery.Model.GroceryStore", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StoreId");

                    b.ToTable("GroceryStores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            ContactNumber = "555-1234",
                            Location = "456 Market St, Cityville",
                            Name = "SuperMart"
                        },
                        new
                        {
                            StoreId = 2,
                            ContactNumber = "555-5678",
                            Location = "789 Elm St, Townsville",
                            Name = "GreenGrocers"
                        });
                });

            modelBuilder.Entity("Grocery.Model.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryStaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryStaffId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            DeliveryStaffId = 1,
                            OrderDate = new DateTime(2024, 9, 16, 9, 51, 51, 788, DateTimeKind.Local).AddTicks(721),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("Grocery.Model.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 3
                        },
                        new
                        {
                            OrderItemId = 2,
                            OrderId = 1,
                            ProductId = 2,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("Grocery.Model.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Fresh Red Apples",
                            ImageUrl = "https://example.com/apple.jpg",
                            Name = "Apple",
                            Price = 1.5m,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Organic Bananas",
                            ImageUrl = "https://example.com/banana.jpg",
                            Name = "Banana",
                            Price = 0.75m,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Whole Milk 1L",
                            ImageUrl = "https://example.com/milk.jpg",
                            Name = "Milk",
                            Price = 2.0m,
                            StoreId = 2
                        });
                });

            modelBuilder.Entity("Grocery.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "john.doe@example.com",
                            Name = "John Doe",
                            Password = "hashed_password",
                            Role = "Customer"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "alice.smith@example.com",
                            Name = "Alice Smith",
                            Password = "hashed_password",
                            Role = "DeliveryPartner"
                        });
                });

            modelBuilder.Entity("Grocery.Model.Customer", b =>
                {
                    b.HasOne("Grocery.Model.User", "User")
                        .WithOne()
                        .HasForeignKey("Grocery.Model.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Grocery.Model.DeliveryStaff", b =>
                {
                    b.HasOne("Grocery.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Grocery.Model.Order", b =>
                {
                    b.HasOne("Grocery.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Grocery.Model.DeliveryStaff", "DeliveryStaff")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("DeliveryStaff");
                });

            modelBuilder.Entity("Grocery.Model.OrderItem", b =>
                {
                    b.HasOne("Grocery.Model.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Grocery.Model.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Grocery.Model.Product", b =>
                {
                    b.HasOne("Grocery.Model.GroceryStore", "GroceryStore")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroceryStore");
                });

            modelBuilder.Entity("Grocery.Model.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Grocery.Model.DeliveryStaff", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Grocery.Model.GroceryStore", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Grocery.Model.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Grocery.Model.Product", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
